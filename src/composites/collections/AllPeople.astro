---
import Section from '@layouts/Section.astro'
import Grid from '@layouts/Grid.astro'
import { _sectionPadding, _xPadding } from '@scripts/snips'
import CardPerson from '@blocks/CardPerson.astro'
import ButtonFab from '@atoms/ButtonFab.astro'
import InputText from '@atoms/InputText.astro'
import FiltersPeople from '@blocks/FiltersPeople.astro'
import { MAXITEMS } from '@scripts/constants'
import Pagination from '@blocks/Pagination.astro'
import { _getVisibleItems } from '@scripts/get-visible-items'
import ButtonFlat from '@atoms/ButtonFlat.astro'
import NoResult from '@blocks/NoResult.astro'
import _getPeople from '@scripts/collections/get-people'
import ButtonMore from '@atoms/ButtonMore.astro'
import _getDesignations from '@scripts/collections/get-designations'
import _getOffices from '@scripts/collections/get-offices'
import _getSectors from '@scripts/collections/get-sectors'
import _getPractices from '@scripts/collections/get-practices'

const { blok } = Astro.props
const people = await _getPeople()
const designationsData = await _getDesignations()
const designations = designationsData.data.stories
	.sort((a, b) => parseInt(a.content.rank - b.content.rank))
	.map((a) => a.content.title)
	.slice(0, 4)
const officesData = await _getOffices()
const sectorsData = await _getSectors()
const offices = officesData.data.stories.map((o) => o.content.tag)
const sectors = sectorsData.data.stories.map((o) => o.content.title)
const practicesData = await _getPractices()
const practices = practicesData.data.stories.map((i) => i.content.title)
const maxItems = MAXITEMS
const page = Astro.url.searchParams.get('page') || '1'
const search = Astro.url.searchParams.get('s')
const current = parseInt(page, 10)
const allCategories = {
	page: 'People',
	designation: Astro.url.searchParams.get('role') || '',
	practices: Astro.url.searchParams.getAll('practices[]'),
	sectors: Astro.url.searchParams.getAll('sectors[]'),
	offices: Astro.url.searchParams.getAll('offices[]'),
}
const { searchResultsItems, visibleItems } = _getVisibleItems(
	people,
	search,
	current,
	maxItems,
	allCategories,
)
const allPeopleFilters = {
	designations,
	offices,
	sectors,
	practices,
	allCategories,
}
---

<Section
	component={blok.component}
	title={blok.title}
	overlap
	class='r-hide-overflow overflow-y-clip z-20 bg-[var(--color-bg-default)] rounded-t-[1.5rem] md:rounded-t-[3.5rem] lg:rounded-t-[4.5rem]'>
	<Grid split='sidebar' class='items-start'>
		<div
			class:list={[
				'self-start sticky -top-px z-20 bg-[var(--color-bg-default)] ml:bg-transparent ml:pt-8 flex flex-col group [&.is-pinned]:shadow ml:!shadow-none ml:max-h-[calc(100vh-1.5rem)] overflow-y-clip px-4 md:px-8 ml:pr-0 lg:pl-16',
			]}
			data-pin-top>
			<form
				class='space-y-1.5 min-h-0 relative overflow-auto'
				data-search-filter>
				<ButtonMore
					tag='button'
					type='submit'
					label='View Results'
					class='hidden ml-auto mb-4'
				/>
				<div
					class='flex items-center justify-between py-3 ml:!pb-0 gap-3'>
					<InputText
						label='Search'
						value={search}
						id='text'
						name='s'
						class='w-full local-search'
						isSearch
					/>
					<!-- <ButtonFab
						icon='funnel'
						label='Toggle Page Sorting & Filtering'
						class='xl:sr-only flex-shrink-0'
						type='button'
						data-drawer-trigger='filters-people'
						data-display='filters-people'
					/> -->
				</div>
				<FiltersPeople
					designations={designations}
					locations={offices}
					sectors={sectors}
					practices={practices}
					selectedItems={allCategories}
					class='hidden ml:flex ml:flex-col'
				/>
			</form>
		</div>
		<div
			class:list={[
				'flex items-center justify-center ml:justify-start flex-wrap gap-6 lg:gap-8 relative z-10 pt-4 ml:pt-8 px-4 md:px-8 ml:pl-0 ml:pr-8',
			]}>
			{
				visibleItems.length > 0 ? (
					visibleItems.map((i, x) => (
						<CardPerson person={i} tag='h3' size='default' />
					))
				) : (
					<NoResult />
				)
			}
			<Pagination
				total={searchResultsItems.length}
				size={maxItems}
				current={current}
			/>
		</div>
	</Grid>
</Section>
