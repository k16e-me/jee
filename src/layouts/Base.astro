---
import Head from '@layouts/Head.astro'
import Header from '@layouts/Header.astro'
import Footer from '@layouts/Footer.astro'
import { useStoryblokApi } from '@storyblok/astro'
import TitleHidden from '@blocks/TitleHidden.astro'
import {
	_addAwards,
	_awards,
	_people,
	_addPeople,
	_designtions,
	_addDesignations,
	_offices,
	_addOffices,
	_sectors,
	_addSectors,
	_practices,
	_addPractices,
	_africaPractices,
	_addAfricaPractices,
	_insights,
	_addInsights,
	_categories,
	_addCategories,
	_addEvents,
	_events,
} from '@scripts/store'

const currentYear = new Date().getFullYear(),
	lastYear = currentYear - 1,
	{ pageTitle, pageDescription, pageThumbnail, showNav, isError } =
		Astro.props,
	api = useStoryblokApi(),
	{ data: settings } = await api.get('cdn/stories/settings', {
		version: import.meta.env.DEV ? 'draft' : 'published',
		resolve_links: 'url',
		resolve_relations: [
			'settings.awards',
			'settings.links',
			'settings.socials',
		],
	}),
	site = settings.story.content

let { data: awards } = await api.get('cdn/stories', {
		starts_with: 'awards/',
		version: import.meta.env.DEV ? 'draft' : 'published',
		by_slugs: [`awards/${currentYear}/*`, `awards/${lastYear}/*`],
		level: 3,
		is_startpage: 0,
	}),
	{ data: dataDesignations } = await api.get('cdn/stories', {
		starts_with: 'designations/',
		version: import.meta.env.DEV ? 'draft' : 'published',
		is_startpage: 0,
	}),
	{ data: dataCategories } = await api.get('cdn/stories', {
		starts_with: 'category/',
		version: import.meta.env.DEV ? 'draft' : 'published',
		is_startpage: 0,
	}),
	{ data: dataOffices } = await api.get('cdn/stories', {
		starts_with: 'offices/',
		version: import.meta.env.DEV ? 'draft' : 'published',
		is_startpage: 0,
	}),
	{ data: dataPeople } = await api.get('cdn/stories', {
		starts_with: 'people/',
		version: import.meta.env.DEV ? 'draft' : 'published',
		is_startpage: 0,
		resolve_links: 'url',
		resolve_relations: [
			'person.byline',
			'person_links.location',
			'collection.collection'
		],
	}),
	{ data: dataSectors } = await api.get('cdn/stories', {
		starts_with: 'sectors/',
		version: import.meta.env.DEV ? 'draft' : 'published',
		is_startpage: 0,
		resolve_links: 'url',
		sort_by: 'content.title:asc',
	}),
	{ data: dataPractices } = await api.get('cdn/stories', {
		starts_with: 'practices/',
		version: import.meta.env.DEV ? 'draft' : 'published',
		is_startpage: 0,
		resolve_links: 'url',
		sort_by: 'content.title:asc',
	}),
	{ data: dataAfricaPractices } = await api.get('cdn/stories', {
		starts_with: 'africa-expertise/',
		version: import.meta.env.DEV ? 'draft' : 'published',
		is_startpage: 0,
		resolve_links: 'url',
		sort_by: 'content.title:asc',
	}),
	{ data: dataInsights } = await api.get('cdn/stories', {
		starts_with: 'insights/',
		version: import.meta.env.DEV ? 'draft' : 'published',
		is_startpage: 0,
		sort_by: 'content.published_date:desc',
		resolve_links: 'url',
		resolve_relations: [
			'insight.category',
			'insight.author',
			'insight.expertise',
		],
	}),
	{ data: dataEvents } = await api.get('cdn/stories', {
		starts_with: 'events/',
		version: import.meta.env.DEV ? 'draft' : 'published',
		is_startpage: 0,
		sort_by: 'content.start_date:desc',
		resolve_links: 'url',
		resolve_relations: ['session.host', 'panelist.person'],
	})

let people = dataPeople.stories,
	designations = dataDesignations.stories,
	offices = dataOffices.stories,
	sectors = dataSectors.stories,
	practices = dataPractices.stories,
	africaPractices = dataAfricaPractices.stories,
	insights = dataInsights.stories,
	categories = dataCategories.stories,
	events = dataEvents.stories

_addAwards(awards)
_addPeople(people)
_addDesignations(designations)
_addOffices(offices)
_addSectors(sectors)
_addPractices(practices)
_addAfricaPractices(africaPractices)
_addInsights(insights)
_addCategories(categories)
_addEvents(events)
---

<!doctype html>
<html lang='en' class='scroll-smooth bg-[var(--color-bg-default)]'>
	<Head
		title={`${pageTitle} | ${site.title}`}
		description={pageDescription || site.description}
		image={pageThumbnail || '/thumbnail.png'}
	/>
	<body class='max-w-screen-3xl mx-auto flex flex-col min-h-screen'>
		<TitleHidden tag='h2' title={pageTitle} />
		<Header nav={site.nav} tools={site.tools} />
		<main class='mb-auto swup-in' id='swup'>
			<slot />
		</main>
		<Footer site={site} />
		<script src='@scripts/global.js'></script>
	</body>
</html>
